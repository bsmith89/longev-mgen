from snake.misc import alias_recipe, alias_fmt, curl_recipe, curl_unzip_recipe

# Compare my MAGs to reference genomes (e.g. Ormerod2016)

# {{{1 Metadata

config['genome'] = pd.read_table(config['_meta_genome'], index_col=['genome_id'])
genome_group = pd.read_table(config['_meta_genome_group'])
config['genome_group'] = {}
for genome_group_id, d in genome_group.groupby('genome_group_id'):
    config['genome_group'][genome_group_id] = {}
    config['genome_group'][genome_group_id]['mags'] = d[d.subgroup == 'here'].genome_id.unique()
    config['genome_group'][genome_group_id]['refs'] = d[d.subgroup != 'here'].genome_id.unique()


# {{{1 Download and link data

# {{{2 GenBank (all other Muribaculaceae and references)

def genbank_genomic_ftp_url(accession, assembly):
    prefix=accession[:3]
    n1to3=accession[4:7]
    n4to6=accession[7:10]
    n7to9=accession[10:13]
    return f'https://ftp.ncbi.nlm.nih.gov/genomes/all/{prefix}/{n1to3}/{n4to6}/{n7to9}/{accession}_{assembly}/{accession}_{assembly}_genomic.fna.gz'
# e.g. https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/512/915/GCA_000512915.1_ASM51291v1/GCA_000512915.1_ASM51291v1_genomic.fna.gz

rule download_genbank_genome:
    output: 'raw/genbank/{accession}_{assembly}.fn'
    params:
        url=lambda w: genbank_genomic_ftp_url(w.accession, w.assembly)
    shell: curl_unzip_recipe
localrules: download_genbank_genome

rule alias_genbank_genome:
    output: 'data/ref.mags/{genome}.g.fn'
    input:
        lambda w: ('raw/genbank/{}_{}.fn'
                   .format(config['genome']['genbank_accession'][w.genome],
                           config['genome']['assembly_name'][w.genome]))
    shell: "ln -rs {input} {output}"
localrules: alias_genbank_genome


# {{{1 Compile data

rule full_genomes_group_quast_result:
    output:
        dir=directory("data/{group}.a.mags.{genomes}.g.{proc}.quast.d"),
        report="data/{group}.a.mags.{genomes}.g.{proc}.quast.tsv",
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags/{mag_stem}.g.{wildcards.proc}.fn'
                                for mag_stem in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags/{ref_stem}.g.fn'
                                for ref_stem in config['genome_group'][wildcards.genomes]['refs']],
    params:
        labels=lambda wildcards: ', '.join(list(config['genome_group'][wildcards.genomes]['mags']) +
                                           list(config['genome_group'][wildcards.genomes]['refs']))
    conda: 'conda/quast.yaml'
    shell:
        """
        quast.py --threads={threads} --min-contig 0 --output-dir {output.dir} --labels "{params.labels}" {input.mags} {input.refs}
        cp {output.dir}/transposed_report.tsv {output.report}
        """

# This is then used by the CheckM recipe to get a summary of completeness/contamination
rule make_genome_group_dir:
    output: directory('data/{group}.a.mags.{genomes}.g.{proc}.for_checkm.d')
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags/{mag}.g.{wildcards.proc}.fn'
                                for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags/{ref}.g.fn'
                                for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        """
        rm -rf {output}
        mkdir -p {output}
        for genome in {input.mags};
        do
            ln -rs $genome {output}/$(basename --suffix .g.{wildcards.proc}.fn $genome).fn
        done
        for genome in {input.refs};
        do
            ln -rs $genome {output}/$(basename --suffix .g.fn $genome).fn
        done
        """

rule combine_feature_cvrgs:
    output: 'data/{group}.a.mags.{genomes}.g.{proc}.feature_cvrg.tsv'
    input:
        lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.feature_cvrg.tsv'
                           for mag in config['genome_group'][wildcards.genomes]['mags']],
    shell:
        """
        cat {input} > {output}
        """

rule combine_annotation_summaries:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.prokka.summary.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.prokka.summary.tsv'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.prokka.summary.tsv'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        r"""
        (
            printf "mag_id\tstatistic\tvalue\n"
            for file in {input.mags}; do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.{wildcards.proc}.prokka.summary.tsv $file) '{{print mag_id, $0}}' $file
            done
            for file in {input.refs}; do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.prokka.summary.tsv $file) '{{print mag_id, $0}}' $file
            done
        ) | python3 -c '
import pandas as pd
import sys

data = pd.read_table(sys.stdin, index_col=["mag_id", "statistic"])["value"].unstack("statistic")
data.to_csv(sys.stdout, sep="\t")
                        ' > {output}
        """

rule compile_genomes_group_stats_table:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.genome_stats.tsv"
    input:
        checkm="data/{group}.a.mags.{genomes}.g.{proc}.checkm_details.tsv",
        quast="data/{group}.a.mags.{genomes}.g.{proc}.quast.tsv",
        annot="data/{group}.a.mags.{genomes}.g.{proc}.prokka.summary.tsv"
    shell:
        """
        tmp_checkm=$(mktemp)
        tmp_quast=$(mktemp)
        tmp_annot=$(mktemp)
        tmp_unord=$(mktemp)
        sed '1,1s:Bin Id:mag_id:' {input.checkm} | sort -k1,1 > $tmp_checkm
        sed '1,1s:Assembly:mag_id:' {input.quast} | sort -k1,1 > $tmp_quast
        sort -k1,1 {input.annot} > $tmp_annot
        join -t '\t' $tmp_checkm <(join -t '\t' $tmp_quast $tmp_annot) > $tmp_unord
        grep 'mag_id' $tmp_unord > {output}
        grep -v 'mag_id' $tmp_unord >> {output}
        """

rule compile_gene_by_genome_tables:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.gene_genome_map.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.prokka-annot.tsv'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.prokka-annot.tsv'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        r"""
        (
            for file in {input.mags}
            do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.{wildcards.proc}.prokka-annot.tsv $file) 'NR > 1 {{print mag_id, $1}}' $file
            done
            for file in {input.refs}
            do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.prokka-annot.tsv $file) 'NR > 1 {{print mag_id, $1}}' $file
            done
        ) > {output}
        """

rule compile_sequence_by_genome_tables:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.sequence_to_genome.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags/{mag}.g.{wildcards.proc}.sequence.list'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags/{ref}.g.sequence.list'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        r"""
        (
            for file in {input.mags}
            do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.{wildcards.proc}.sequence.list $file) '{{print $1, mag_id}}' $file
            done
            for file in {input.refs}
            do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.sequence.list $file) '{{print $1, mag_id}}' $file
            done
        ) > {output}
        """

rule compile_feature_details:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.feature_details.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.feature_details.tsv'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.feature_details.tsv'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        """
        cat {input} > {output}
        """

ruleorder: compile_feature_details > extract_feature_details

rule combine_feature_tables:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.features.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.features.tsv'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.features.tsv'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        r"""
        cat {input} > {output}
        """

ruleorder: combine_feature_tables > parse_feature_table

rule combine_annotations:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.{annot}-annot.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.{wildcards.annot}.tsv'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.{wildcards.annot}.tsv'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    wildcard_constraints:
        annot=one_word_wc_constraint
    shell:
        """
        cat {input} > {output}
        """

rule compile_genome_sequences:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.fn"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags/{mag}.g.{wildcards.proc}.fn'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags/{ref}.g.fn'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    wildcard_constraints:
        annot=one_word_wc_constraint
    shell:
        """
        cat {input} > {output}
        """

rule compile_cds:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.cds.{seqtype}"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.cds.{wildcards.seqtype}'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.cds.{wildcards.seqtype}'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    wildcard_constraints:
        annot=one_word_wc_constraint,
        seqtype='fa|fn'
    shell:
        """
        cat {input} > {output}
        """
ruleorder: compile_cds > annotate_mag

rule combine_prokka_annotations:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.prokka-annot.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.prokka-annot.tsv'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.prokka-annot.tsv'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        """
        for file in {input}
        do
            sed '1,1d' $file
        done > {output}
        """

ruleorder: combine_prokka_annotations > combine_annotations

rule combine_minpath_results:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.ec-minpath.count.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.ec-minpath.list'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.ec-minpath.list'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    wildcard_constraints:
        annot=one_word_wc_constraint
    shell:
        r"""
        (
            for file in {input.mags}
            do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.{wildcards.proc}.ec-minpath.list $file) '{{print mag_id, $1, 1}}' $file
            done
            for file in {input.refs}
            do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .ec-minpath.list $file) '{{print mag_id, $1, 1}}' $file
            done
        ) > {output}
        """

# {{{1 Full-genome phylogenetics

rule pick_phylogenetic_marker_genes:
    output:
        dir=directory("data/{group}.a.mags.{genomes}.g.{proc}.marker_genes.d"),
        # .../markers.list  # List of shared single-copy markers
        # .../GENE_NAME.fa  # Amino-acid sequences to be aligned for each gene
        # .../genome_to_cds.tsv  # Mapping from sequences to genomes
    input:
        script="scripts/pick_marker_genes.py",
        mags_hits=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{g}.g.{wildcards.proc}.TIGRFAM-hits.hmmer-tc.tsv'
                                     for g in config['genome_group'][wildcards.genomes]['mags']],
        refs_hits=lambda wildcards: [f'data/ref.mags.annot/{g}.g.TIGRFAM-hits.hmmer-tc.tsv'
                                     for g in config['genome_group'][wildcards.genomes]['refs']],
        mags_seqs=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{g}.g.{wildcards.proc}.cds.fa'
                                     for g in config['genome_group'][wildcards.genomes]['mags']],
        refs_seqs=lambda wildcards: [f'data/ref.mags.annot/{g}.g.cds.fa'
                                     for g in config['genome_group'][wildcards.genomes]['refs']],
        tigrfam="ref/TIGRFAM.hmm.tsv",
    params:
        mags=lambda wildcards: [(f'{g}:data/{wildcards.group}.a.mags.annot/{g}.g.{wildcards.proc}.TIGRFAM-hits.hmmer-tc.tsv'
                                 f':data/{wildcards.group}.a.mags.annot/{g}.g.{wildcards.proc}.cds.fa')
                                for g in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [(f'{g}:data/ref.mags.annot/{g}.g.TIGRFAM-hits.hmmer-tc.tsv'
                                 f':data/ref.mags.annot/{g}.g.cds.fa')
                                for g in config['genome_group'][wildcards.genomes]['refs']],
        min_frac=0.95,
    shell:
        """
        rm -rf {output.dir}
        mkdir -p {output.dir}
        {input.script} --fasta-output-template '{output}/{{}}.fa' \
                --tsv-output '{output.dir}/gene_genome_map.tsv' \
                --list-output '{output.dir}/genes.list' \
                --min-frac {params.min_frac} \
                {params.mags} {params.refs}
        join -t '\t' <(sort {output.dir}/genes.list) <(sort {input.tigrfam}) > {output.dir}/genes.details.tsv
        """

rule align_phylogenetic_marker_genes:
    output:
        dir=directory("data/{group}.a.mags.{genomes}.g.{proc}.marker_genes.align.d"),
    input:
        squeeze_script="scripts/squeeze_alignment.py",
        dir="data/{group}.a.mags.{genomes}.g.{proc}.marker_genes.d",
        hmm="ref/hmm/TIGRFAM.hmm",
    shell:
        """
        rm -rf {output.dir}
        mkdir -p {output.dir}
        while read hmm
        do
            echo $hmm
            # Grab the correct HMMs from {input.hmm}
            hmmfetch {input.hmm} $hmm > {output.dir}/$hmm.hmm
            # hmmalign each fasta file
            hmmalign --amino --trim --informat fasta {output.dir}/$hmm.hmm {input.dir}/$hmm.fa \
                    | convert -f stockholm -t fasta > {output.dir}/$hmm.afa
            # Trim off the unaligned nucleotides (see scripts/squeeze_alignment.py) for each
            {input.squeeze_script} '-.*abcdefghijklmnopqrstuvwxyz' < {output.dir}/$hmm.afa > {output.dir}/$hmm.sqz.afa
        done < {input.dir}/genes.list
        """

rule concatenate_marker_gene_alignments:
    output: "data/{group}.a.mags.{genomes}.g.{proc}.marker_genes.afa",
    input:
        concat_script="scripts/concat_alignments.py",
        search_dir="data/{group}.a.mags.{genomes}.g.{proc}.marker_genes.d",
        align_dir="data/{group}.a.mags.{genomes}.g.{proc}.marker_genes.align.d",
    shell:
        """
        # Concatenate the alignments {input.concat_script}
        {input.concat_script} {input.search_dir}/gene_genome_map.tsv \
                $(for hmm in `cat {input.search_dir}/genes.list`
                  do
                      echo $hmm:{input.align_dir}/$hmm.sqz.afa
                  done
                 ) \
                > {output}
        """

rule extract_rpoB_cds:
    output: "data/{group}.a.mags.{genomes}.g.{proc}.cds.rpoB.fa"
    input: "data/{group}.a.mags.{genomes}.g.{proc}.cds.fa"
    params:
        regex='DNA-directed RNA polymerase subunit beta$'
    shell:
        """
        seqtk seq {input} | grep -A1 "{params.regex}" | awk 'NR%3!=0' > {output}
        """
