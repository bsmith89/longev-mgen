from snake.misc import alias_recipe, alias_fmt, curl_recipe, curl_unzip_recipe

# Compare my MAGs to reference genomes (e.g. Ormerod2016)

# {{{1 Metadata

config['ref_genomes'] = \
        [ 'GP1'
        , 'GP2'
        , 'GP3'
        , 'GP4'
        , 'H1'
        , 'H10'
        , 'H2'
        , 'H3'
        , 'H4'
        , 'H5'
        , 'H6'
        , 'H7'
        , 'H8'
        , 'H9'
        , 'K1'
        , 'K10'
        , 'M1'
        , 'M10'
        , 'M11'
        , 'M12'
        , 'M13'
        , 'M14'
        , 'M2'
        , 'M3'
        , 'M5'
        , 'M6'
        , 'M7'
        , 'M8'
        , 'M9'
        , 'Homeothermus_arabinoxylanisolvens'
        , 'Muribaculum_intestinale_yl27'
        ]

config['sra'] = \
        {
        'GP1'                               : 'DAAI01000000',
        'GP2'                               : 'DAAJ01000000',
        'GP3'                               : 'DAAK01000000',
        'GP4'                               : 'DAAL01000000',
        'H1'                                : 'DAAM01000000',
        'H10'                               : 'DAAV01000000',
        'H2'                                : 'DAAO01000000',
        'H3'                                : 'DAAN01000000',
        'H4'                                : 'DAAP01000000',
        'H5'                                : 'DAAQ01000000',
        'H6'                                : 'DAAR01000000',
        'H7'                                : 'DAAS01000000',
        'H8'                                : 'DAAT01000000',
        'H9'                                : 'DAAU01000000',
        'K1'                                : 'LUJZ01000000',
        'K10'                               : 'LUKA01000000',
        'M1'                                : 'LUJL01000000',
        'M10'                               : 'LUJU01000000',
        'M11'                               : 'LUJV01000000',
        'M12'                               : 'LUJW01000000',
        'M13'                               : 'LUJX01000000',
        'M14'                               : 'LUJY01000000',
        'M2'                                : 'LUJM01000000',
        'M3'                                : 'LUJN01000000',
        'M5'                                : 'LUJP01000000',
        'M6'                                : 'LUJQ01000000',
        'M7'                                : 'LUJR01000000',
        'M8'                                : 'LUJS01000000',
        'M9'                                : 'LUJT01000000',
        'Homeothermus_arabinoxylanisolvens' : 'LUJO01000000',
        }

config['mags'] = \
        {
        'OTU-3'     : {'taxon' : 'Sphingopyxis alaskensis'},
        'OTU-2'     : {'taxon' : 'Lactobacillus johnsonii'},
        'OTU-1-UM'  : {'taxon' : 'Muribaculaceae sp.'},
        'OTU-1-UT'  : {'taxon' : 'Muribaculaceae sp.'},
        'OTU-7'     : {'taxon' : 'Muribaculaceae sp.'},
        'OTU-9'     : {'taxon' : 'Muribaculaceae sp.'},
        'OTU-5'     : {'taxon' : 'Muribaculaceae sp.'},
        'OTU-4'     : {'taxon' : 'Muribaculaceae sp.'},
        'OTU-49'    : {'taxon' : 'Muribaculaceae sp.'},
        'OTU-17'    : {'taxon' : 'Muribaculaceae sp.'},
        'OTU-15'    : {'taxon' : 'Lachnospiraceae sp.'},
        'OTU-25'    : {'taxon' : 'Lachnospiraceae sp.'},
        'OTU-32'    : {'taxon' : 'Lachnospiraceae sp.'},
        'OTU-12'    : {'taxon' : 'Ruminiclostridium sp.'},
        'OTU-6'     : {'taxon' : 'Turicibacter sp.'},
        'OTU-20-UM' : {'taxon' : 'Ruminococcaceae sp.'},
        'OTU-20-UT' : {'taxon' : 'Ruminococcaceae sp.'},
        'OTU-35'    : {'taxon' : 'Ruminococcaceae sp.'},
        'OTU-58'    : {'taxon' : 'Mollicutes sp.'},
        'OTU-41'    : {'taxon' : 'Bacteroides sp.'},
        }

config['marker_genes'] = \
    ['rpoB',
     'gyrB',
     'rpoA',
     'rpoC',
     'lepA',
    ]

config['gene_to_search_string'] = \
    {'rpoB': 'DNA-directed RNA polymerase subunit beta$',
     'gyrB': 'DNA gyrase subunit B$',
     'rpoA': 'DNA-directed RNA polymerase subunit alpha$',
     'rpoC': 'DNA-directed RNA polymerase subunit beta\'$',
     'lepA': 'Elongation factor 4$',
     'rrnS': '16S ribosomal RNA$'}

config['gene_to_hmm'] = \
    {'rpoB': 'TIGR02013',
     'gyrB': 'TIGR01059',
     'rpoA': 'TIGR02027',
     'CBM58': 'CBM58',
     'GH13': 'GH13',
     'rpoC': 'TIGR02386',
     'lepA': 'TIGR01393',
     'mmdA': 'TIGR01117',
     }

# {{{1 Link data

rule alias_ormerod_mags:
    output: 'seq/ref.mags.d/{mag_id}.fn'
    input: lambda wildcards: 'raw/sra/{accession}.fn'.format(accession=config['sra'][wildcards.mag_id])
    wildcard_constraints:
        mag_id='[^.]+'
    shell: "ln -rs {input} {output}"

rule download_m_intestinale_genome:
    output: 'raw/ref/Muribaculum_intestinale_yl27.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/002/201/515/GCA_002201515.1_ASM220151v1/GCA_002201515.1_ASM220151v1_genomic.fna.gz'
    shell: curl_unzip_recipe

rule alias_m_intestinale_genome:
    output: 'seq/ref.mags.d/Muribaculum_intestinale_yl27.fn'
    input: 'raw/ref/Muribaculum_intestinale_yl27.fn'
    shell: "ln -rs {input} {output}"

ruleorder: alias_m_intestinale_genome > alias_ormerod_mags

rule alias_all_reference_mags_and_genomes:
    input: expand('seq/ref.mags.d/{mag_id}.fn', mag_id=config['ref_genomes'])

localrules: alias_ormerod_mags, download_m_intestinale_genome,
            alias_m_intestinale_genome, alias_all_reference_mags_and_genomes

# {{{1 Compile data

rule combine_genes_from_mags:
    output:
        fa='seq/{group}.a.mags.cds.{gene_id}-hits.fa',
        fn='seq/{group}.a.mags.cds.{gene_id}-hits.fn'
    wildcard_constraints:
        gene_id='[^.]+'
    input:
        mags_fa=lambda wildcards: ['seq/{group}.a.mags.annot.d/{mag_id}.cds.{gene_id}-hits.fa'
                                  .format(group=wildcards.group,
                                          mag_id=mag_id,
                                          gene_id=wildcards.gene_id)
                              for mag_id
                              in config['mags'].keys()],
        ormd_fa=lambda wildcards: ['seq/ref.mags.annot.d/{mag_id}.cds.{gene_id}-hits.fa'
                                  .format(group=wildcards.group,
                                          mag_id=mag_id,
                                          gene_id=wildcards.gene_id)
                              for mag_id
                              in config['ref_genomes']],
        mags_fn=lambda wildcards: ['seq/{group}.a.mags.annot.d/{mag_id}.cds.{gene_id}-hits.fn'
                                  .format(group=wildcards.group,
                                          mag_id=mag_id,
                                          gene_id=wildcards.gene_id)
                              for mag_id
                              in config['mags'].keys()],
        ormd_fn=lambda wildcards: ['seq/ref.mags.annot.d/{mag_id}.cds.{gene_id}-hits.fn'
                                  .format(group=wildcards.group,
                                          mag_id=mag_id,
                                          gene_id=wildcards.gene_id)
                              for mag_id
                              in config['ref_genomes']],
    shell:
        """
        cat {input.mags_fn} {input.ormd_fn} > {output.fn}
        cat {input.mags_fa} {input.ormd_fa} > {output.fa}
        """

localrules: combine_genes_from_mags

# rule process_ormerod_bins:
#     input:
#         expand('res/ormerod.bins.prokka.d/{bin_id}.d', bin_id=config['ormerod'].keys()),
#         'res/core.a.dedup.deadapt.qtrim.contigs.bins.prokka.d/bin_0090.d'
#
# rule pull_out_phylogenetic_marker_genes_nucl_ormerod:
#     output: 'seq/{stem}.prokka.{gene_id}.fn',
#     input:
#         expand('res/{{stem}}.prokka.d/{bin_id}.d/prokka.ffn', bin_id=config['ormerod'].keys()),
#         'res/core.a.dedup.deadapt.qtrim.contigs.bins.prokka.d/bin_0090.d/prokka.ffn'
#     params:
#         search_string=lambda wildcards: config['marker_gene']['search_string'][wildcards.gene_id],
#     shell:
#         r"""
#         rm -f {output}
#         for file in {input}; do
#             seqtk subseq $file <(grep '{params.search_string}' $file | sed 's:^>\([^ ]*\).*:\1:') >> {output}
#         done
#         """
#
# rule pull_out_phylogenetic_marker_genes_amino_ormerod:
#     output: 'seq/{stem}.prokka.{gene_id}.fa',
#     input:
#         expand('res/{{stem}}.prokka.d/{bin_id}.d/prokka.faa', bin_id=config['ormerod'].keys()),
#         'res/core.a.dedup.deadapt.qtrim.contigs.bins.prokka.d/bin_0090.d/prokka.faa'
#     params:
#         search_string=lambda wildcards: config['marker_gene']['search_string'][wildcards.gene_id],
#     shell:
#         r"""
#         rm -f {output}
#         for file in {input}; do
#             seqtk subseq $file <(grep '{params.search_string}' $file | sed 's:^>\([^ ]*\).*:\1:') >> {output}
#         done
#         """
