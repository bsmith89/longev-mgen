from snake.misc import alias_recipe, alias_fmt, curl_recipe, curl_unzip_recipe

# Compare my MAGs to reference genomes (e.g. Ormerod2016)

# {{{1 Metadata

# TODO: Acquire Muribaculaceae genomes from GenBank starting at
# https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=2005473
# And navigating to each organism page
# (e.g. "Candidatus Homeothermus arabinoxylanisolvens"),
# picking the genome (e.g. "Genome: 1"), then assembly (e.g.
# "GCA_001689405.1 ASM168940v1 scaffolds: 60 contigs: 66 N50: 74,143 L50: 13"),
# and finally going to the GenBank FTP site (e.g. "Download the GenBank assembly").
# Then I copied the link to the *.fna.gz file
# (e.g. GCA_001689405.1_ASM168940v1_genomic.fna.gz).
config['sra'] = \
        {
        'GP1'                               : 'DAAI01000000',
        'GP2'                               : 'DAAJ01000000',
        'GP3'                               : 'DAAK01000000',
        'GP4'                               : 'DAAL01000000',
        'H1'                                : 'DAAM01000000',
        'H10'                               : 'DAAV01000000',
        'H2'                                : 'DAAO01000000',
        'H3'                                : 'DAAN01000000',
        'H4'                                : 'DAAP01000000',
        'H5'                                : 'DAAQ01000000',
        'H6'                                : 'DAAR01000000',
        'H7'                                : 'DAAS01000000',
        'H8'                                : 'DAAT01000000',
        'H9'                                : 'DAAU01000000',
        'K1'                                : 'LUJZ01000000',
        'K10'                               : 'LUKA01000000',
        'M1'                                : 'LUJL01000000',
        'M10'                               : 'LUJU01000000',
        'M11'                               : 'LUJV01000000',
        'M12'                               : 'LUJW01000000',
        'M13'                               : 'LUJX01000000',
        'M14'                               : 'LUJY01000000',
        'M2'                                : 'LUJM01000000',
        'M3'                                : 'LUJN01000000',
        'M5'                                : 'LUJP01000000',
        'M6'                                : 'LUJQ01000000',
        'M7'                                : 'LUJR01000000',
        'M8'                                : 'LUJS01000000',
        'M9'                                : 'LUJT01000000',
        'Homeothermus_arabinoxylanisolvens' : 'LUJO01000000',
        }

# config['mags'] = \
#         {
#         'Otu0003'     : {'taxon' : 'Sphingopyxis alaskensis'},
#         'Otu0002'     : {'taxon' : 'Lactobacillus johnsonii'},
#         'Otu0001'     : {'taxon' : 'Muribaculaceae sp.'},
#         'Otu0007'     : {'taxon' : 'Muribaculaceae sp.'},
#         'Otu0009'     : {'taxon' : 'Muribaculaceae sp.'},
#         'Otu0005'     : {'taxon' : 'Muribaculaceae sp.'},
#         'Otu0004'     : {'taxon' : 'Muribaculaceae sp.'},
#         'Otu0049'     : {'taxon' : 'Muribaculaceae sp.'},
#         'Otu0017'     : {'taxon' : 'Muribaculaceae sp.'},
#         'Otu0015'     : {'taxon' : 'Lachnospiraceae sp.'},
#         'Otu0025'     : {'taxon' : 'Lachnospiraceae sp.'},
#         'Otu0032'     : {'taxon' : 'Lachnospiraceae sp.'},
#         'Otu0012'     : {'taxon' : 'Ruminiclostridium sp.'},
#         'Otu0006'     : {'taxon' : 'Turicibacter sp.'},
#         'Otu0020'     : {'taxon' : 'Ruminococcaceae sp.'},
#         'Otu0035'     : {'taxon' : 'Ruminococcaceae sp.'},
#         'Otu0058'     : {'taxon' : 'Mollicutes sp.'},
#         'Otu0041'     : {'taxon' : 'Bacteroides sp.'},
#         }
#
config['genome_group'] = \
        { 'muri':
             { 'mags': [ 'B1A'
                       , 'B1B'
                       , 'B2'
                       , 'B3'
                       , 'B4'
                       , 'B5'
                       , 'B6'
                       , 'B7'
                       , 'B8'
                       ]
             , 'refs': [ 'GP1'
                       , 'GP2'
                       , 'GP3'
                       , 'GP4'
                       , 'H1'
                       , 'H10'
                       , 'H2'
                       , 'H3'
                       , 'H4'
                       , 'H5'
                       , 'H6'
                       , 'H7'
                       , 'H8'
                       , 'H9'
                       , 'K1'
                       , 'K10'
                       , 'M1'
                       , 'M10'
                       , 'M11'
                       , 'M12'
                       , 'M13'
                       , 'M14'
                       , 'M2'
                       , 'M3'
                       , 'M5'
                       , 'M6'
                       , 'M7'
                       , 'M8'
                       , 'M9'
                       , 'Homeothermus_arabinoxylanisolvens'
                       , 'Muribaculum_intestinale_yl27'
                       # , 'Muribaculaceae_bacterium_DSM_100739'  # mostly identical to M. intestinale
                       # , 'Muribaculaceae_bacterium_DSM_100746'  # mostly identical to M. intestinale
                       # , 'Muribaculaceae_bacterium_DSM_100749'  # identical-ish to Muribaculaceae_bacterium_DSM_100764
                       # , 'Muribaculaceae_bacterium_DSM_100720'  # mostly identical to M13
                       # , 'Duncaniella_muris_DSM_103720'  # TODO
                       , 'Zag10'
                       , 'Zag1'
                       # , 'An287'  # Apparently not Muris
                       # , 'An289'  # Apparently not Muris
                       , 'Bacteroides_thetaiotaomicron_VPI5482'  # Outgroup
                       , 'Bacteroides_ovatus_ATCC_8483'  # Outgroup
                       , 'Barnesiella_viscericola_DSM_18177'  # Outgroup
                       , 'Porphyromonas_gingivalis_ATCC_33277'  # Outgroup
                       # Lagkouvardos2019 DSM Isolates:
                       , 'Paramuribaculum_intestinale_DSM_100749T'  # Paramuribaculum intestinale DSM 100749T GCA_003024925.1
                       , 'Paramuribaculum_intestinale_DSM_100764'  # Paramuribaculum intestinale DSM 100764 GCA_003024815.1
                       , 'Duncaniella_muris_DSM_103720T'  # Duncaniella muris DSM 103720T GCA_003024805.1
                       # , 'Muribaculum_intestinale_DSM_100746'  # Muribaculum intestinale DSM 100746 GCA_003024855.1
                       # , 'Muribaculum_intestinale_DSM_100739'  # Muribaculum intestinale DSM 100739 GCA_003024845.1
                       # TODO: Lagkouvardos2019 "Short-term" isolates (not deposited in DSM)
                       # Isolate-037 (Harlan; PRJNA503544)
                       # Isolate-001 (NCI; PRJNA503101)
                       # Isolate-001 (NCI; PRJNA503101)
                       # Isolate-036 (Harlan; PRJNA503543)
                       # Isolate-113 (HZI; PRJNA503598)
                       # Isolate-114 (HZI; PRJNA503600)
                       # Isolate-007 (NCI; PRJNA503106)
                       # Isolate-100 (HZI; PRJNA503563)
                       # Isolate-042 (Harlan; PRJNA503547)
                       # Isolate-102 (HZI; PRJNA503594)
                       # Isolate-104 (HZI; PRJNA503595)
                       # Isolate-004 (NCI; PRJNA503105)
                       # Isolate-105 (HZI; PRJNA503596)
                       # Isolate-043 (Harlan; PRJNA503548)
                       # Isolate-110 (HZI; PRJNA503597)
                       # Isolate-080 (Janvier; PRJNA503555)
                       # Isolate-039 (Harlan; PRJNA503545)
                       # Isolate-083 (Janvier; PRJNA503556)
                       # Isolate-077 (Janvier; PRJNA503553)
                       # Isolate-084 (Janvier; PRJNA503557)
                       # Isolate-002 (NCI; PRJNA503102)
                       # Isolate-013 (NCI; PRJNA503113)
                       # TODO: Lagkouvardos2019 MAGs from iMGMC
                       ]
             }
        }

# {{{1 Download and link data

# {{{2 SRA (All Ormerod Genomes)
rule alias_sra_genomes:
    output: 'data/ref.mags/{mag_id}.g.fn'
    input:
        lambda wildcards: 'raw/sra/{accession}.fn'.format(accession=config['sra'][wildcards.mag_id])
    wildcard_constraints:
        mag_id='[^.]+'
    shell: "ln -rs {input} {output}"
localrules: alias_sra_genomes

# {{{2 Muribaculum intestinale YL27
rule download_m_intestinale_genome:
    output: 'raw/ref/Muribaculum_intestinale_yl27.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/002/201/515/GCA_002201515.1_ASM220151v1/GCA_002201515.1_ASM220151v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_m_intestinale_genome

rule alias_m_intestinale_genome:
    output: 'data/ref.mags/Muribaculum_intestinale_yl27.g.fn'
    input: 'raw/ref/Muribaculum_intestinale_yl27.fn'
    shell: alias_recipe
localrules: alias_m_intestinale_genome

ruleorder: alias_m_intestinale_genome > alias_sra_genomes

# {{{2 Muribaculaceae bacterium DSM 100739
rule download_dsm_100739_genome:
    output: 'raw/ref/Muribaculaceae_bacterium_DSM_100739.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/024/845/GCA_003024845.1_ASM302484v1/GCA_003024845.1_ASM302484v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_dsm_100739_genome

rule alias_dsm_100739_genome:
    output: 'data/ref.mags/Muribaculaceae_bacterium_DSM_100739.g.fn'
    input: 'raw/ref/Muribaculaceae_bacterium_DSM_100739.fn'
    shell: alias_recipe
localrules: alias_dsm_100739_genome

ruleorder: alias_dsm_100739_genome > alias_sra_genomes

# {{{2 Muribaculaceae bacterium DSM 100746
rule download_dsm_100746_genome:
    output: 'raw/ref/Muribaculaceae_bacterium_DSM_100746.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/024/855/GCA_003024855.1_ASM302485v1/GCA_003024855.1_ASM302485v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_dsm_100746_genome

rule alias_dsm_100746_genome:
    output: 'data/ref.mags/Muribaculaceae_bacterium_DSM_100746.g.fn'
    input: 'raw/ref/Muribaculaceae_bacterium_DSM_100746.fn'
    shell: alias_recipe
localrules: alias_dsm_100746_genome

ruleorder: alias_dsm_100746_genome > alias_sra_genomes

# {{{2 Muribaculaceae bacterium DSM 100749
rule download_dsm_100749_genome:
    output: 'raw/ref/Muribaculaceae_bacterium_DSM_100749.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/024/925/GCA_003024925.1_ASM302492v1/GCA_003024925.1_ASM302492v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_dsm_100749_genome

rule alias_dsm_100749_genome:
    output: 'data/ref.mags/Muribaculaceae_bacterium_DSM_100749.g.fn'
    input: 'raw/ref/Muribaculaceae_bacterium_DSM_100749.fn'
    shell: alias_recipe
localrules: alias_dsm_100749_genome

ruleorder: alias_dsm_100749_genome > alias_sra_genomes

# {{{2 Muribaculaceae bacterium DSM 100720
rule download_dsm_100720_genome:
    output: 'raw/ref/Muribaculaceae_bacterium_DSM_100720.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/024/805/GCA_003024805.1_ASM302480v1/GCA_003024805.1_ASM302480v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_dsm_100720_genome

rule alias_dsm_100720_genome:
    output: 'data/ref.mags/Muribaculaceae_bacterium_DSM_100720.g.fn'
    input: 'raw/ref/Muribaculaceae_bacterium_DSM_100720.fn'
    shell: alias_recipe
localrules: alias_dsm_100720_genome

ruleorder: alias_dsm_100720_genome > alias_sra_genomes

# {{{2 Muribaculaceae bacterium DSM 100764
rule download_dsm_100764_genome:
    output: 'raw/ref/Muribaculaceae_bacterium_DSM_100764.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/024/815/GCA_003024815.1_ASM302481v1/GCA_003024815.1_ASM302481v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_dsm_100764_genome

rule alias_dsm_100764_genome:
    output: 'data/ref.mags/Muribaculaceae_bacterium_DSM_100764.g.fn'
    input: 'raw/ref/Muribaculaceae_bacterium_DSM_100764.fn'
    shell: alias_recipe
localrules: alias_dsm_100764_genome

ruleorder: alias_dsm_100764_genome > alias_sra_genomes

# {{{2 Muribaculaceae bacterium Zag10
rule download_zag10_genome:
    output: 'raw/ref/Zag10.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/002/633/305/GCA_002633305.1_ASM263330v1/GCA_002633305.1_ASM263330v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_zag10_genome

rule alias_zag10_genome:
    output: 'data/ref.mags/Zag10.g.fn'
    input: 'raw/ref/Zag10.fn'
    shell: alias_recipe
localrules: alias_zag10_genome

ruleorder: alias_zag10_genome > alias_sra_genomes

# {{{2 Muribaculaceae bacterium Zag1
rule download_zag1_genome:
    output: 'raw/ref/Zag1.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/002/633/115/GCA_002633115.1_ASM263311v1/GCA_002633115.1_ASM263311v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_zag1_genome

rule alias_zag1_genome:
    output: 'data/ref.mags/Zag1.g.fn'
    input: 'raw/ref/Zag1.fn'
    shell: alias_recipe
localrules: alias_zag1_genome

ruleorder: alias_zag1_genome > alias_sra_genomes

# {{{2 Muribaculaceae bacterium An287
rule download_an287_genome:
    output: 'raw/ref/An287.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/002/159/585/GCA_002159585.1_ASM215958v1/GCA_002159585.1_ASM215958v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_an287_genome

rule alias_an287_genome:
    output: 'data/ref.mags/An287.g.fn'
    input: 'raw/ref/An287.fn'
    shell: alias_recipe
localrules: alias_an287_genome

ruleorder: alias_an287_genome > alias_sra_genomes

# {{{2 Muribaculaceae bacterium An289
rule download_an289_genome:
    output: 'raw/ref/An289.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/002/159/555/GCA_002159555.1_ASM215955v1/GCA_002159555.1_ASM215955v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_an289_genome

rule alias_an289_genome:
    output: 'data/ref.mags/An289.g.fn'
    input: 'raw/ref/An289.fn'
    shell: alias_recipe
localrules: alias_an289_genome

ruleorder: alias_an289_genome > alias_sra_genomes

# # {{{2 Duncaniella_muris
# rule download_duncaniella_muris_genome:
#     output: 'raw/ref/Duncaniella_muris_DSM_103720.fn'
#     params:
#         url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/024/805/GCA_003024805.1_ASM302480v1'
#     shell: curl_unzip_recipe
# localrules: download_duncaniella_muris_genome
#
# rule alias_duncaniella_muris_genome:
#     output: 'data/ref.mags/Duncaniella_muris_DSM_103720.fn'
#     input: 'raw/ref/Duncaniella_muris_DSM_103720.fn'
#     shell: alias_recipe
# localrules: alias_duncaniella_muris_genome
#
# ruleorder: alias_duncaniella_muris_genome > alias_sra_genomes

# {{{2 Bacteroides thetaiotaomicron VPI5482
rule download_btheta_genome:
    output: 'raw/ref/Bacteroides_thetaiotaomicron_VPI5482.fn'
    params:
        url='https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=AE015928.1&rettype=fasta&retmode=text'
    shell: curl_recipe
localrules: download_btheta_genome

rule alias_btheta_genome:
    output: 'data/ref.mags/Bacteroides_thetaiotaomicron_VPI5482.g.fn'
    input: 'raw/ref/Bacteroides_thetaiotaomicron_VPI5482.fn'
    shell: "ln -rs {input} {output}"
localrules: alias_btheta_genome

ruleorder: alias_btheta_genome > alias_sra_genomes

# {{{2 Bacteroides ovatus ATCC 8483
rule download_bovatus_genome:
    output: 'raw/ref/Bacteroides_ovatus_ATCC_8483.fn'
    params:
        url='https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=CP012938.1&rettype=fasta&retmode=text'
    shell: curl_recipe
localrules: download_bovatus_genome

rule alias_bovatus_genome:
    output: 'data/ref.mags/Bacteroides_ovatus_ATCC_8483.g.fn'
    input: 'raw/ref/Bacteroides_ovatus_ATCC_8483.fn'
    shell: "ln -rs {input} {output}"
localrules: alias_bovatus_genome

ruleorder: alias_bovatus_genome > alias_sra_genomes

# {{{2 Barnesiella viscericola DSM 18177
rule download_bvisc_genome:
    output: 'raw/ref/Barnesiella_viscericola_DSM_18177.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/512/915/GCA_000512915.1_ASM51291v1/GCA_000512915.1_ASM51291v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_bvisc_genome

rule alias_bvisc_genome:
    output: 'data/ref.mags/Barnesiella_viscericola_DSM_18177.g.fn'
    input: 'raw/ref/Barnesiella_viscericola_DSM_18177.fn'
    shell: alias_recipe
localrules: alias_bvisc_genome

ruleorder: alias_bvisc_genome > alias_sra_genomes

# {{{2 Porphyromonas gingivalis ATCC 33277
rule download_pging_genome:
    output: 'raw/ref/Porphyromonas_gingivalis_ATCC_33277.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/010/505/GCA_000010505.1_ASM1050v1/GCA_000010505.1_ASM1050v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_pging_genome

rule alias_pging_genome:
    output: 'data/ref.mags/Porphyromonas_gingivalis_ATCC_33277.g.fn'
    input: 'raw/ref/Porphyromonas_gingivalis_ATCC_33277.fn'
    shell: alias_recipe
localrules: alias_pging_genome

ruleorder: alias_pging_genome > alias_sra_genomes

# {{{2 Lactobacillus johnsonii NCC 533
rule download_ljohn_genome:
    output: 'raw/ref/Lactobacillus_johnsonii_NCC_533.fn'
    params:
        url='ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/bacteria/Lactobacillus_johnsonii/latest_assembly_versions/GCA_000008065.1_ASM806v1/GCA_000008065.1_ASM806v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_ljohn_genome

rule alias_ljohn_genome:
    output: 'data/ref.mags/Lactobacillus_johnsonii_NCC_533.g.fn'
    input: 'raw/ref/Lactobacillus_johnsonii_NCC_533.fn'
    shell: alias_recipe
localrules: alias_ljohn_genome
ruleorder: alias_ljohn_genome > alias_sra_genomes

# {{{2 Paramuribaculum_intestinale_DSM_100749T
rule download_Paramuribaculum_intestinale_DSM_100749T_genome:
    output: 'raw/ref/Paramuribaculum_intestinale_DSM_100749T.fn'
    params:
        url='https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/024/925/GCA_003024925.1_ASM302492v1/GCA_003024925.1_ASM302492v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_Paramuribaculum_intestinale_DSM_100749T_genome

rule alias_Paramuribaculum_intestinale_DSM_100749T_genome:
    output: 'data/ref.mags/Paramuribaculum_intestinale_DSM_100749T.g.fn'
    input: 'raw/ref/Paramuribaculum_intestinale_DSM_100749T.fn'
    shell: "ln -rs {input} {output}"
localrules: alias_Paramuribaculum_intestinale_DSM_100749T_genome
ruleorder: alias_Paramuribaculum_intestinale_DSM_100749T_genome > alias_sra_genomes

# {{{2 Paramuribaculum_intestinale_DSM_100764
rule download_Paramuribaculum_intestinale_DSM_100764_genome:
    output: 'raw/ref/Paramuribaculum_intestinale_DSM_100764.fn'
    params:
        url='https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/024/815/GCA_003024815.1_ASM302481v1/GCA_003024815.1_ASM302481v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_Paramuribaculum_intestinale_DSM_100764_genome

rule alias_Paramuribaculum_intestinale_DSM_100764_genome:
    output: 'data/ref.mags/Paramuribaculum_intestinale_DSM_100764.g.fn'
    input: 'raw/ref/Paramuribaculum_intestinale_DSM_100764.fn'
    shell: "ln -rs {input} {output}"
localrules: alias_Paramuribaculum_intestinale_DSM_100764_genome
ruleorder: alias_Paramuribaculum_intestinale_DSM_100764_genome > alias_sra_genomes

# {{{2 Duncaniella_muris_DSM_103720T
rule download_Duncaniella_muris_DSM_103720T_genome:
    output: 'raw/ref/Duncaniella_muris_DSM_103720T.fn'
    params:
        url='https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/024/805/GCA_003024805.1_ASM302480v1/GCA_003024805.1_ASM302480v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_Duncaniella_muris_DSM_103720T_genome

rule alias_Duncaniella_muris_DSM_103720T_genome:
    output: 'data/ref.mags/Duncaniella_muris_DSM_103720T.g.fn'
    input: 'raw/ref/Duncaniella_muris_DSM_103720T.fn'
    shell: "ln -rs {input} {output}"
localrules: alias_Duncaniella_muris_DSM_103720T_genome
ruleorder: alias_Duncaniella_muris_DSM_103720T_genome > alias_sra_genomes

# {{{2 Muribaculum_intestinale_DSM_100746
rule download_Muribaculum_intestinale_DSM_100746_genome:
    output: 'raw/ref/Muribaculum_intestinale_DSM_100746.fn'
    params:
        url='https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/024/855/GCA_003024855.1_ASM302485v1/GCA_003024855.1_ASM302485v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_Muribaculum_intestinale_DSM_100746_genome

rule alias_Muribaculum_intestinale_DSM_100746_genome:
    output: 'data/ref.mags/Muribaculum_intestinale_DSM_100746.g.fn'
    input: 'raw/ref/Muribaculum_intestinale_DSM_100746.fn'
    shell: "ln -rs {input} {output}"
localrules: alias_Muribaculum_intestinale_DSM_100746_genome
ruleorder: alias_Muribaculum_intestinale_DSM_100746_genome > alias_sra_genomes

# {{{2 Muribaculum_intestinale_DSM_100739
rule download_Muribaculum_intestinale_DSM_100739_genome:
    output: 'raw/ref/Muribaculum_intestinale_DSM_100739.fn'
    params:
        url='https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/024/845/GCA_003024845.1_ASM302484v1/GCA_003024845.1_ASM302484v1_genomic.fna.gz'
    shell: curl_unzip_recipe
localrules: download_Muribaculum_intestinale_DSM_100739_genome

rule alias_Muribaculum_intestinale_DSM_100739_genome:
    output: 'data/ref.mags/Muribaculum_intestinale_DSM_100739.g.fn'
    input: 'raw/ref/Muribaculum_intestinale_DSM_100739.fn'
    shell: "ln -rs {input} {output}"
localrules: alias_Muribaculum_intestinale_DSM_100739_genome
ruleorder: alias_Muribaculum_intestinale_DSM_100739_genome > alias_sra_genomes

# {{{1 Compile data

rule full_genomes_group_quast_result:
    output:
        dir=directory("data/{group}.a.mags.{genomes}.g.{proc}.quast.d"),
        report="data/{group}.a.mags.{genomes}.g.{proc}.quast.tsv",
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags/{mag_stem}.g.{wildcards.proc}.fn'
                                for mag_stem in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags/{ref_stem}.g.fn'
                                for ref_stem in config['genome_group'][wildcards.genomes]['refs']],
    params:
        labels=lambda wildcards: ', '.join(list(config['genome_group'][wildcards.genomes]['mags']) +
                                           list(config['genome_group'][wildcards.genomes]['refs']))
    conda: 'conda/quast.yaml'
    shell:
        """
        quast.py --threads={threads} --min-contig 0 --output-dir {output.dir} --labels "{params.labels}" {input.mags} {input.refs}
        cp {output.dir}/transposed_report.tsv {output.report}
        """

# This is then used by the CheckM recipe to get a summary of completeness/contamination
rule make_genome_group_dir:
    output: directory('data/{group}.a.mags.{genomes}.g.{proc}.for_checkm.d')
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags/{mag}.g.{wildcards.proc}.fn'
                                for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags/{ref}.g.fn'
                                for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        """
        rm -rf {output}
        mkdir -p {output}
        for genome in {input.mags};
        do
            ln -rs $genome {output}/$(basename --suffix .g.{wildcards.proc}.fn $genome).fn
        done
        for genome in {input.refs};
        do
            ln -rs $genome {output}/$(basename --suffix .g.fn $genome).fn
        done
        """

rule combine_feature_cvrgs:
    output: 'data/{group}.a.mags.{genomes}.g.{proc}.feature_cvrg.tsv'
    input:
        lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.feature_cvrg.tsv'
                           for mag in config['genome_group'][wildcards.genomes]['mags']],
    shell:
        """
        cat {input} > {output}
        """

rule combine_annotation_summaries:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.prokka.summary.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.prokka.summary.tsv'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.prokka.summary.tsv'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        r"""
        (
            printf "mag_id\tstatistic\tvalue\n"
            for file in {input.mags}; do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.{wildcards.proc}.prokka.summary.tsv $file) '{{print mag_id, $0}}' $file
            done
            for file in {input.refs}; do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.prokka.summary.tsv $file) '{{print mag_id, $0}}' $file
            done
        ) | python3 -c '
import pandas as pd
import sys

data = pd.read_table(sys.stdin, index_col=["mag_id", "statistic"])["value"].unstack("statistic")
data.to_csv(sys.stdout, sep="\t")
                        ' > {output}
        """

rule compile_genomes_group_stats_table:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.genome_stats.tsv"
    input:
        checkm="data/{group}.a.mags.{genomes}.g.{proc}.checkm_details.tsv",
        quast="data/{group}.a.mags.{genomes}.g.{proc}.quast.tsv",
        annot="data/{group}.a.mags.{genomes}.g.{proc}.prokka.summary.tsv"
    shell:
        """
        tmp_checkm=$(mktemp)
        tmp_quast=$(mktemp)
        tmp_annot=$(mktemp)
        tmp_unord=$(mktemp)
        sed '1,1s:Bin Id:mag_id:' {input.checkm} | sort -k1,1 > $tmp_checkm
        sed '1,1s:Assembly:mag_id:' {input.quast} | sort -k1,1 > $tmp_quast
        sort -k1,1 {input.annot} > $tmp_annot
        join -t '\t' $tmp_checkm <(join -t '\t' $tmp_quast $tmp_annot) > $tmp_unord
        grep 'mag_id' $tmp_unord > {output}
        grep -v 'mag_id' $tmp_unord >> {output}
        """

rule compile_gene_by_genome_tables:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.gene_genome_map.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.prokka-annot.tsv'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.prokka-annot.tsv'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        r"""
        (
            for file in {input.mags}
            do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.{wildcards.proc}.prokka-annot.tsv $file) 'NR > 1 {{print mag_id, $1}}' $file
            done
            for file in {input.refs}
            do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.prokka-annot.tsv $file) 'NR > 1 {{print mag_id, $1}}' $file
            done
        ) > {output}
        """

rule compile_sequence_by_genome_tables:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.sequence_to_genome.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags/{mag}.g.{wildcards.proc}.sequence.list'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags/{ref}.g.sequence.list'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        r"""
        (
            for file in {input.mags}
            do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.{wildcards.proc}.sequence.list $file) '{{print $1, mag_id}}' $file
            done
            for file in {input.refs}
            do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.sequence.list $file) '{{print $1, mag_id}}' $file
            done
        ) > {output}
        """

rule compile_feature_details:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.feature_details.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.feature_details.tsv'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.feature_details.tsv'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        """
        cat {input} > {output}
        """

ruleorder: compile_feature_details > extract_feature_details

rule combine_feature_tables:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.features.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.features.tsv'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.features.tsv'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        r"""
        cat {input} > {output}
        """

ruleorder: combine_feature_tables > parse_feature_table


rule combine_annotations:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.{annot}-annot.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.{wildcards.annot}.tsv'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.{wildcards.annot}.tsv'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    wildcard_constraints:
        annot=one_word_wc_constraint
    shell:
        """
        cat {input} > {output}
        """

rule compile_genome_sequences:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.fn"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags/{mag}.g.{wildcards.proc}.fn'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags/{ref}.g.fn'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    wildcard_constraints:
        annot=one_word_wc_constraint
    shell:
        """
        cat {input} > {output}
        """

rule compile_cds:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.cds.{seqtype}"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.cds.{wildcards.seqtype}'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.cds.{wildcards.seqtype}'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    wildcard_constraints:
        annot=one_word_wc_constraint,
        seqtype='fa|fn'
    shell:
        """
        cat {input} > {output}
        """
ruleorder: compile_cds > annotate_mag

rule combine_prokka_annotations:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.prokka-annot.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.prokka-annot.tsv'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.prokka-annot.tsv'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    shell:
        """
        for file in {input}
        do
            sed '1,1d' $file
        done > {output}
        """

ruleorder: combine_prokka_annotations > combine_annotations

rule combine_minpath_results:
    output:
        "data/{group}.a.mags.{genomes}.g.{proc}.ec-minpath.count.tsv"
    input:
        mags=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{mag}.g.{wildcards.proc}.ec-minpath.list'
                                     for mag in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [f'data/ref.mags.annot/{ref}.g.ec-minpath.list'
                                     for ref in config['genome_group'][wildcards.genomes]['refs']],
    wildcard_constraints:
        annot=one_word_wc_constraint
    shell:
        r"""
        (
            for file in {input.mags}
            do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .g.{wildcards.proc}.ec-minpath.list $file) '{{print mag_id, $1, 1}}' $file
            done
            for file in {input.refs}
            do
                awk -v OFS='\t' -v mag_id=$(basename --suffix .ec-minpath.list $file) '{{print mag_id, $1, 1}}' $file
            done
        ) > {output}
        """

# {{{1 Full-genome phylogenetics

rule pick_phylogenetic_marker_genes:
    output:
        dir=directory("data/{group}.a.mags.{genomes}.g.{proc}.marker_genes.d"),
        # .../markers.list  # List of shared single-copy markers
        # .../GENE_NAME.fa  # Amino-acid sequences to be aligned for each gene
        # .../genome_to_cds.tsv  # Mapping from sequences to genomes
    input:
        script="scripts/pick_marker_genes.py",
        mags_hits=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{g}.g.{wildcards.proc}.TIGRFAM-hits.hmmer-tc.tsv'
                                     for g in config['genome_group'][wildcards.genomes]['mags']],
        refs_hits=lambda wildcards: [f'data/ref.mags.annot/{g}.g.TIGRFAM-hits.hmmer-tc.tsv'
                                     for g in config['genome_group'][wildcards.genomes]['refs']],
        mags_seqs=lambda wildcards: [f'data/{wildcards.group}.a.mags.annot/{g}.g.{wildcards.proc}.cds.fa'
                                     for g in config['genome_group'][wildcards.genomes]['mags']],
        refs_seqs=lambda wildcards: [f'data/ref.mags.annot/{g}.g.cds.fa'
                                     for g in config['genome_group'][wildcards.genomes]['refs']],
        tigrfam="ref/TIGRFAM.hmm.tsv",
    params:
        mags=lambda wildcards: [(f'{g}:data/{wildcards.group}.a.mags.annot/{g}.g.{wildcards.proc}.TIGRFAM-hits.hmmer-tc.tsv'
                                 f':data/{wildcards.group}.a.mags.annot/{g}.g.{wildcards.proc}.cds.fa')
                                for g in config['genome_group'][wildcards.genomes]['mags']],
        refs=lambda wildcards: [(f'{g}:data/ref.mags.annot/{g}.g.TIGRFAM-hits.hmmer-tc.tsv'
                                 f':data/ref.mags.annot/{g}.g.cds.fa')
                                for g in config['genome_group'][wildcards.genomes]['refs']],
        min_frac=1.0,  # TODO: Fix concatenation step and set this down to 0.95
    shell:
        """
        rm -rf {output.dir}
        mkdir -p {output.dir}
        {input.script} --fasta-output-template '{output}/{{}}.fa' \
                --tsv-output '{output.dir}/gene_genome_map.tsv' \
                --list-output '{output.dir}/genes.list' \
                --min-frac {params.min_frac} \
                {params.mags} {params.refs}
        join -t '\t' <(sort {output.dir}/genes.list) <(sort {input.tigrfam}) > {output.dir}/genes.details.tsv
        """

rule align_phylogenetic_marker_genes:
    output:
        dir=directory("data/{group}.a.mags.{genomes}.g.{proc}.marker_genes.align.d"),
    input:
        squeeze_script="scripts/squeeze_alignment.py",
        dir="data/{group}.a.mags.{genomes}.g.{proc}.marker_genes.d",
        hmm="ref/hmm/TIGRFAM.hmm",
    shell:
        """
        rm -rf {output.dir}
        mkdir -p {output.dir}
        while read hmm
        do
            echo $hmm
            # Grab the correct HMMs from {input.hmm}
            hmmfetch {input.hmm} $hmm > {output.dir}/$hmm.hmm
            # hmmalign each fasta file
            hmmalign --amino --trim --informat fasta {output.dir}/$hmm.hmm {input.dir}/$hmm.fa \
                    | convert -f stockholm -t fasta > {output.dir}/$hmm.afa
            # Trim off the unaligned nucleotides (see scripts/squeeze_alignment.py) for each
            {input.squeeze_script} '-.*abcdefghijklmnopqrstuvwxyz' < {output.dir}/$hmm.afa > {output.dir}/$hmm.sqz.afa
        done < {input.dir}/genes.list
        """

rule concatenate_marker_gene_alignments:
    output: "data/{group}.a.mags.{genomes}.g.{proc}.marker_genes.afa",
    input:
        concat_script="scripts/concat_alignments.py",
        search_dir="data/{group}.a.mags.{genomes}.g.{proc}.marker_genes.d",
        align_dir="data/{group}.a.mags.{genomes}.g.{proc}.marker_genes.align.d",
    shell:
        """
        # Concatenate the alignments {input.concat_script}
        {input.concat_script} {input.search_dir}/gene_genome_map.tsv \
                $(for hmm in `cat {input.search_dir}/genes.list`
                  do
                      echo $hmm:{input.align_dir}/$hmm.sqz.afa
                  done
                 ) \
                > {output}
        """

rule extract_rpoB_cds:
    output: "data/{group}.a.mags.{genomes}.g.{proc}.cds.rpoB.fa"
    input: "data/{group}.a.mags.{genomes}.g.{proc}.cds.fa"
    params:
        regex='DNA-directed RNA polymerase subunit beta$'
    shell:
        """
        seqtk seq {input} | grep -A1 "{params.regex}" | awk 'NR%3!=0' > {output}
        """
