# Compare my MAGs to reference genomes (e.g. Ormerod2016)

# {{{1 Metadata

config['ormerod'] = \
        {
        'GP1'                               : {'sra_id': 'DAAI01000000'},
        'GP2'                               : {'sra_id': 'DAAJ01000000'},
        'GP3'                               : {'sra_id': 'DAAK01000000'},
        'GP4'                               : {'sra_id': 'DAAL01000000'},
        'H1'                                : {'sra_id': 'DAAM01000000'},
        'H10'                               : {'sra_id': 'DAAV01000000'},
        'H2'                                : {'sra_id': 'DAAO01000000'},
        'H3'                                : {'sra_id': 'DAAN01000000'},
        'H4'                                : {'sra_id': 'DAAP01000000'},
        'H5'                                : {'sra_id': 'DAAQ01000000'},
        'H6'                                : {'sra_id': 'DAAR01000000'},
        'H7'                                : {'sra_id': 'DAAS01000000'},
        'H8'                                : {'sra_id': 'DAAT01000000'},
        'H9'                                : {'sra_id': 'DAAU01000000'},
        'K1'                                : {'sra_id': 'LUJZ01000000'},
        'K10'                               : {'sra_id': 'LUKA01000000'},
        'M1'                                : {'sra_id': 'LUJL01000000'},
        'M10'                               : {'sra_id': 'LUJU01000000'},
        'M11'                               : {'sra_id': 'LUJV01000000'},
        'M12'                               : {'sra_id': 'LUJW01000000'},
        'M13'                               : {'sra_id': 'LUJX01000000'},
        'M14'                               : {'sra_id': 'LUJY01000000'},
        'M2'                                : {'sra_id': 'LUJM01000000'},
        'M3'                                : {'sra_id': 'LUJN01000000'},
        'M5'                                : {'sra_id': 'LUJP01000000'},
        'M6'                                : {'sra_id': 'LUJQ01000000'},
        'M7'                                : {'sra_id': 'LUJR01000000'},
        'M8'                                : {'sra_id': 'LUJS01000000'},
        'M9'                                : {'sra_id': 'LUJT01000000'},
        'Homeothermus_arabinoxylanisolvens' : {'sra_id': 'LUJO01000000'},
        }

config['mags'] = \
        {
        'OTU-3'                               : {'taxon': 'Sphingopyxis alaskensis'},
        'OTU-2'                               : {'taxon': 'Lactobacillus johnsonii'},
        'OTU-1-UM'                               : {'taxon': 'Muribaculaceae sp.'},
        'OTU-1-UT'                               : {'taxon': 'Muribaculaceae sp.'},
        'OTU-7'                               : {'taxon': 'Muribaculaceae sp.'},
        'OTU-9'                               : {'taxon': 'Muribaculaceae sp.'},
        'OTU-5'                               : {'taxon': 'Muribaculaceae sp.'},
        'OTU-4'                               : {'taxon': 'Muribaculaceae sp.'},
        'OTU-49'                               : {'taxon': 'Muribaculaceae sp.'},
        'OTU-17'                               : {'taxon': 'Muribaculaceae sp.'},
        'OTU-15'                               : {'taxon': 'Lachnospiraceae sp.'},
        'OTU-25'                               : {'taxon': 'Lachnospiraceae sp.'},
        'OTU-32'                               : {'taxon': 'Lachnospiraceae sp.'},
        'OTU-12'                               : {'taxon': 'Ruminiclostridium sp.'},
        'OTU-6'                               : {'taxon': 'Turicibacter sp.'},
        'OTU-20'                               : {'taxon': 'Ruminococcaceae sp.'},
        'OTU-35'                               : {'taxon': 'Ruminococcaceae sp.'},
        'OTU-58'                               : {'taxon': 'Mollicutes sp.'},
        'OTU-41'                               : {'taxon': 'Bacteroides sp.'},
        }

config['marker_gene'] = {}
# How to find this marker gene in the Prokka output:
config['marker_gene']['search_string'] = \
    {'rpoB': 'DNA-directed RNA polymerase subunit beta$',
     'gyrB': 'DNA gyrase subunit B$',
     'rrnS': '16S ribosomal RNA$'}
config['marker_gene']['tigrfam'] = \
    {'rpoB': 'TIGR02013',
     'gyrB': 'TIGR01059'}

rule alias_ormerod_mags:
    output: 'seq/ref.mags.d/{mag_id}.fn'
    input: lambda wildcards: 'raw/sra/{accession}.fn'.format(accession=config['ormerod'][wildcards.mag_id]['sra_id'])
    shell: "ln -rs {input} {output}"

rule alias_m_intestinale_genome:
    output: 'seq/ref.mags.d/Muribaculum_intestinale_yl27.fn'
    input: 'raw/ref/Muribaculum_intestinale_yl27.fn'
    shell: "ln -rs {input} {output}"

ruleorder: alias_m_intestinale_genome > alias_ormerod_mags

rule alias_all_reference_mags_and_genomes:
    input: expand('seq/ref.mags.d/{mag_id}.fn', mag_id=config['ormerod'].keys()),
           'seq/ref.mags.d/Muribaculum_intestinale_yl27.fn'

localrules: alias_ormerod_mags, alias_all_reference_mags_and_genomes

rule combine_marker_genes_from_mags:
    output:
        fa='seq/{group}.a.mags.{gene_id}.fa',
        fn='seq/{group}.a.mags.{gene_id}.fn'
    input:
        fa=lambda wildcards: ['seq/{group}.a.mags.annot.d/{mag_id}.{gene_id}.fa'
                                  .format(group=wildcards.group,
                                          mag_id=mag_id,
                                          gene_id=wildcards.gene_id)
                              for mag_id
                              in list(config['ormerod'].keys()) + list(config['mags'].keys())],
        fn=lambda wildcards: ['seq/{group}.a.mags.annot.d/{mag_id}.{gene_id}.fn'
                                  .format(group=wildcards.group,
                                          mag_id=mag_id,
                                          gene_id=wildcards.gene_id)
                              for mag_id
                              in list(config['ormerod'].keys()) + list(config['mags'].keys())],

# rule process_ormerod_bins:
#     input:
#         expand('res/ormerod.bins.prokka.d/{bin_id}.d', bin_id=config['ormerod'].keys()),
#         'res/core.a.dedup.deadapt.qtrim.contigs.bins.prokka.d/bin_0090.d'
#
# rule pull_out_phylogenetic_marker_genes_nucl_ormerod:
#     output: 'seq/{stem}.prokka.{gene_id}.fn',
#     input:
#         expand('res/{{stem}}.prokka.d/{bin_id}.d/prokka.ffn', bin_id=config['ormerod'].keys()),
#         'res/core.a.dedup.deadapt.qtrim.contigs.bins.prokka.d/bin_0090.d/prokka.ffn'
#     params:
#         search_string=lambda wildcards: config['marker_gene']['search_string'][wildcards.gene_id],
#     shell:
#         r"""
#         rm -f {output}
#         for file in {input}; do
#             seqtk subseq $file <(grep '{params.search_string}' $file | sed 's:^>\([^ ]*\).*:\1:') >> {output}
#         done
#         """
#
# rule pull_out_phylogenetic_marker_genes_amino_ormerod:
#     output: 'seq/{stem}.prokka.{gene_id}.fa',
#     input:
#         expand('res/{{stem}}.prokka.d/{bin_id}.d/prokka.faa', bin_id=config['ormerod'].keys()),
#         'res/core.a.dedup.deadapt.qtrim.contigs.bins.prokka.d/bin_0090.d/prokka.faa'
#     params:
#         search_string=lambda wildcards: config['marker_gene']['search_string'][wildcards.gene_id],
#     shell:
#         r"""
#         rm -f {output}
#         for file in {input}; do
#             seqtk subseq $file <(grep '{params.search_string}' $file | sed 's:^>\([^ ]*\).*:\1:') >> {output}
#         done
#         """
